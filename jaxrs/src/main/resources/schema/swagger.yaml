openapi: 3.0.1
info:
  title: Fuse TryIt - Jaxrs API
  version: 1.0.0
externalDocs:
  url: https://github.com/tdiesler/nessus-actions
paths:
  /user/{userId}:
    delete:
      summary: Delete the user with the given id
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: "[No Content] Sucessfully delete the user in Keycloak."
        "401":
          description: "[Unauthorized] If the provided access token was not valid."
  /user/{userId}/model/{modelId}:
    get:
      summary: Get the model for the given id.
      operationId: getModel
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: modelId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "[OK] Model for the given id could be accessed."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        "401":
          description: "[Unauthorized] If the provided access token was not valid."
        "404":
          description: "[Not Found] The model for the given id could not be found."
    post:
      summary: Update the given model.
      operationId: updateModel
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: modelId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        "200":
          description: "[OK] Successfully updated the model."
        "401":
          description: "[Unauthorized] If the provided access token was not valid."
    delete:
      summary: Delete the model with the given id.
      operationId: deleteModel
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: modelId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: "[No Content] Successfully deleted the model."
        "401":
          description: "[Unauthorized] If the provided access token was not valid."
  /user/{userId}/model/{modelId}/{runtime}/build:
    get:
      summary: Schedule the build process for the model.
      operationId: buildModel
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: modelId
        in: path
        required: true
        schema:
          type: string
      - name: runtime
        in: path
        required: true
        schema:
          type: string
          enum:
          - standalone
          - docker
          - javaee
      responses:
        "200":
          description: "[OK] Successfully scheduled the model build."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MavenBuildHandle'
        "401":
          description: "[Unauthorized] If the provided access token was not valid."
        "404":
          description: "[Not Found] The model for the given id could not be found."
  /user/{userId}/model/{modelId}/{runtime}/download:
    get:
      summary: Download the build target
      operationId: downloadBuildTarget
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: modelId
        in: path
        required: true
        schema:
          type: string
      - name: runtime
        in: path
        required: true
        schema:
          type: string
          enum:
          - standalone
          - docker
          - javaee
      responses:
        "200":
          description: "[OK] Found the requested build target."
          content:
            application/octet-stream: {}
        "401":
          description: "[Unauthorized] If the provided credentials were not valid."
        "404":
          description: "[Not Found] The target file was not found."
  /user/{userId}/model/{modelId}/{runtime}/sources:
    get:
      summary: Download the project sources
      operationId: downloadProjectSources
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: modelId
        in: path
        required: true
        schema:
          type: string
      - name: runtime
        in: path
        required: true
        schema:
          type: string
          enum:
          - standalone
          - docker
          - javaee
      responses:
        "200":
          description: "[OK] Found the requested project sources."
          content:
            application/octet-stream: {}
        "401":
          description: "[Unauthorized] If the provided credentials were not valid."
        "404":
          description: "[Not Found] The project source file was not found."
  /user/{userId}/model/{modelId}/{runtime}/status:
    get:
      summary: Get the current build status
      operationId: getBuildStatus
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: modelId
        in: path
        required: true
        schema:
          type: string
      - name: runtime
        in: path
        required: true
        schema:
          type: string
          enum:
          - standalone
          - docker
          - javaee
      responses:
        "200":
          description: "[OK] Found the status for the requested project."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MavenBuildHandle'
        "401":
          description: "[Unauthorized] If the provided credentials were not valid."
        "404":
          description: "[Not Found] The project for the given id was not found."
  /user/{userId}/models:
    get:
      summary: Get the list models associated with a given user.
      operationId: getUserModels
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "[OK] List of user model definitions."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'
        "401":
          description: "[Unauthorized] If the provided access token was not valid."
    put:
      summary: Create a new integration model
      operationId: createModel
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelAdd'
      responses:
        "201":
          description: "[Created] Model was successfully created."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        "401":
          description: "[Unauthorized] If the provided access token was not valid."
  /user/{userId}/state:
    get:
      summary: Fetch the current state for the given user id
      operationId: getUserState
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "[OK] Found the requested user state."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserState'
        "401":
          description: "[Unauthorized] If the provided access token was not valid."
  /users:
    put:
      summary: Register a new user with Keycloak
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        "201":
          description: "[Created] User was successfully created to Keycloak."
        "409":
          description: "[Conflict] If the user already exists in Keycloak."
  /users/login:
    post:
      summary: Login the user with Keycloak
      operationId: userLogin
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - password
              - username
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: "[OK] Successful user login."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokens'
        "401":
          description: "[Unauthorized] If the provided credentials were not valid."
components:
  schemas:
    MavenBuildHandle:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        sources:
          type: string
          format: uri
        status:
          type: string
          enum:
          - Scheduled
          - Running
          - Success
          - Failure
          - NotFound
        target:
          type: string
          format: uri
    Model:
      required:
      - modelId
      - userId
      type: object
      properties:
        content:
          type: string
        modelId:
          type: string
        states:
          type: array
          items:
            $ref: '#/components/schemas/ModelState'
        userId:
          type: string
    ModelAdd:
      required:
      - content
      - userId
      type: object
      properties:
        content:
          type: string
        userId:
          type: string
    ModelList:
      required:
      - userId
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/Model'
        userId:
          type: string
    ModelState:
      type: object
      properties:
        runtime:
          type: string
          enum:
          - standalone
          - docker
          - javaee
        status:
          type: string
          enum:
          - Scheduled
          - Running
          - Success
          - Failure
          - NotFound
    UserRegister:
      required:
      - email
      - firstName
      - lastName
      - password
      - username
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        username:
          type: string
    UserState:
      required:
      - email
      - firstName
      - id
      - lastLogin
      - lastName
      - status
      - username
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        id:
          type: string
        lastLogin:
          type: string
          format: date-time
        lastName:
          type: string
        logins:
          type: integer
          format: int32
        status:
          type: string
        username:
          type: string
    UserTokens:
      required:
      - accessToken
      - refreshToken
      - userId
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        userId:
          type: string
